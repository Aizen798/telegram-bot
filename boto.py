from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# --- BOT TOKEN ---
TOKEN = "8496354252:AAEtknBNNJEl0y_Jg0J_IOXnOnBeBDOm-30"

# --- Products (Demo) ---
products = [
    {"id": 1, "name": "Berserk outfit", "price": 130000, "img": "bers.png"},
    {"id": 2, "name": "Compression shirt", "price": 80000, "img": "comp.png"},
]

# --- /start command ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì¶ –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω", callback_data="products")],
        [InlineKeyboardButton("üìû –•–æ–ª–±–æ–æ –±–∞—Ä–∏—Ö", callback_data="contact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ú–∞–Ω–∞–π –¥—ç–ª–≥“Ø“Ø—Ä—Ç —Ç–∞–≤—Ç–∞–π –º–æ—Ä–∏–ª! ü§ñ –¢–∞ –¥–æ–æ—Ä—Ö —Ü—ç—Å—ç—ç—Å —Å–æ–Ω–≥–æ–Ω–æ —É—É:",
        reply_markup=reply_markup
    )

# --- Button actions ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "products":
        for p in products:
            with open(p["bers.png"], "rb") as img:
                await query.message.reply_photo(
                    img,
                    caption=f"{p['name']}\n“Æ–Ω—ç: {p['price']}‚ÇÆ\n–ë–∞—Ä–∞–∞–≥ –∑–∞—Ö–∏–∞–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ /order_{p['id']} –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø"
                )

    elif query.data == "contact":
        await query.message.reply_text(
            "üìû –£—Ç–∞—Å: 99119911\nüè¨ –•–∞—è–≥: –£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä, –°–ë–î\nüåê –í—ç–±: www.shop.mn"
        )

# --- /order command ---
async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ñ–∏—à—ç—ç: /order_1 –≥—ç–∂ –±–∏—á–≤—ç–ª product id 1-–≥ —Å–æ–Ω–≥–æ—Å–æ–Ω –±–æ–ª–Ω–æ
    text = update.message.text
    try:
        product_id = int(text.split("_")[1])
        product = next((p for p in products if p["id"] == product_id), None)
        if product:
            await update.message.reply_text("‚úçÔ∏è –ù—ç—Ä—ç—ç –±–∏—á–Ω—ç “Ø“Ø:")
            context.user_data["order"] = {"product": product}
        else:
            await update.message.reply_text("–ë–∞—Ä–∞–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π.")
    except:
        await update.message.reply_text("–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –ñ–∏—à—ç—ç: /order_1")

# --- Capture user name for order ---
async def capture_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "order" in context.user_data:
        context.user_data["order"]["name"] = update.message.text
        await update.message.reply_text("–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä–∞–∞ –±–∏—á–Ω—ç “Ø“Ø:")

# --- Capture phone ---
async def capture_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "order" in context.user_data and "name" in context.user_data["order"]:
        context.user_data["order"]["phone"] = update.message.text
        product = context.user_data["order"]["product"]
        # –ê–¥–º–∏–Ω–¥ –º—ç–¥—ç–≥–¥—ç–ª (ADMIN_ID-–≥ ”©”©—Ä–∏–π–Ω Telegram id-—Ä —Å–æ–ª—å)
        ADMIN_ID = 123456789
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–®–∏–Ω—ç –∑–∞—Ö–∏–∞–ª–≥–∞ –∏—Ä–ª—ç—ç!\n–ë–∞—Ä–∞–∞: {product['name']}\n–ù—ç—Ä: {context.user_data['order']['name']}\n–£—Ç–∞—Å: {context.user_data['order']['phone']}"
        )
        await update.message.reply_text("–¢–∞–Ω—ã –∑–∞—Ö–∏–∞–ª–≥–∞ –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç. üôè –ë–∞—è—Ä–ª–∞–ª–∞–∞!")
        context.user_data.clear()

# --- Main function ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("order", order))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, capture_name))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, capture_phone))

    print("ü§ñ Shop bot –∞–∂–∏–ª–ª–∞–∂ —ç—Ö—ç–ª–ª—ç—ç...")
    app.run_polling()

if __name__ == "__main__":
    main()
